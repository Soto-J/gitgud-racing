import { z } from "zod";

export const GetSeasonScheduleInput = z.object({
  seasonId: z.string().min(1, { message: "Season ID required." }),
});

export const GetSeasonsInput = z.object({
  includeSearies: z.enum(["true", "false"]).default("true"),
  seasonYear: z.string().min(1, { message: "Season year required." }),
  seasonQuarter: z.string().min(1, { message: "Season quarter required." }),
});

export const GetSeasonsResponse = z.object({
  season_id: z.number(),
  season_name: z.string(),
  active: z.boolean(),
  allowed_season_members: z.null(),
  car_class_ids: z.array(z.number()),
  car_switching: z.boolean(),
  car_types: z.array(
    z.object({
      car_type: z.string(),
    }),
  ),
  caution_laps_do_not_count: z.boolean(),
  complete: z.boolean(),
  connection_black_flag: z.boolean(),
  consec_caution_within_nlaps: z.number(),
  consec_cautions_single_file: z.boolean(),
  cross_license: z.boolean(),
  distributed_matchmaking: z.boolean(),
  driver_change_rule: z.number(),
  driver_changes: z.boolean(),
  drops: z.number(),
  enable_pitlane_collisions: z.boolean(),
  fixed_setup: z.boolean(),
  green_white_checkered_limit: z.number(),
  grid_by_class: z.boolean(),
  hardcore_level: z.number(),
  has_supersessions: z.boolean(),
  ignore_license_for_practice: z.boolean(),
  incident_limit: z.number(),
  incident_warn_mode: z.number(),
  incident_warn_param1: z.number(),
  incident_warn_param2: z.number(),
  is_heat_racing: z.boolean(),
  license_group: z.number(),
  license_group_types: z.array(
    z.object({
      license_group_type: z.number(),
    }),
  ),
  lucky_dog: z.boolean(),
  max_team_drivers: z.number(),
  max_weeks: z.number(),
  min_team_drivers: z.number(),
  multiclass: z.boolean(),
  must_use_diff_tire_types_in_race: z.boolean(),
  next_race_session: z.unknown().nullable(),
  num_fast_tows: z.number(),
  num_opt_laps: z.number(),
  official: z.boolean(),
  op_duration: z.number(),
  open_practice_session_type_id: z.number(),
  qualifier_must_start_race: z.boolean(),
  race_week: z.number(),
  race_week_to_make_divisions: z.number(),
  reg_user_count: z.number(),
  region_competition: z.boolean(),
  restrict_by_member: z.boolean(),
  restrict_to_car: z.boolean(),
  restrict_viewing: z.boolean(),
  schedule_description: z.string(),
  schedules: z.array(
    z.object({
      season_id: z.number(),
      race_week_num: z.number(),
      car_restrictions: z.array(
        z.object({
          car_id: z.number(),
          max_dry_tire_sets: z.number(),
          max_pct_fuel_fill: z.number(),
          power_adjust_pct: z.number(),
          weight_penalty_kg: z.number(),
        }),
      ),
      category: z.string(),
      category_id: z.number(),
      enable_pitlane_collisions: z.boolean(),
      full_course_cautions: z.boolean(),
      practice_length: z.number(),
      qual_attached: z.boolean(),
      qualify_laps: z.number(),
      qualify_length: z.number(),
      race_lap_limit: z.number(),
      race_time_descriptors: z.array(
        z.object({
          first_session_time: z.string(),
          repeat_minutes: z.number(),
          repeating: z.boolean(),
          session_minutes: z.number(),
          start_date: z.string(),
          super_session: z.boolean(),
        }),
      ),
      race_time_limit: z.null(),
      race_week_car_class_ids: z.array(z.number()),
      race_week_cars: z.array(z.string()),
      restart_type: z.string(),
      schedule_name: z.string(),
      season_name: z.string(),
      series_id: z.number(),
      series_name: z.string(),
      short_parade_lap: z.boolean(),
      special_event_type: z.number().nullable(),
      start_date: z.string(),
      start_type: z.string(),
      start_zone: z.boolean(),
      track: z.object({
        category: z.string(),
        category_id: z.number(),
        config_name: z.string(),
        track_id: z.number(),
        track_name: z.string(),
      }),
      track_state: z.object({
        leave_marbles: z.boolean(),
      }),
      warmup_length: z.number(),
      weather: z.object({
        allow_fog: z.boolean(),
        forecast_options: z.object({
          allow_fog: z.boolean(),
          forecast_type: z.number(),
          precipitation: z.number(),
          skies: z.number(),
          stop_precip: z.number(),
          temperature: z.number(),
          weather_seed: z.number(),
          wind_dir: z.number(),
          wind_speed: z.number(),
        }),
        precip_option: z.number(),
        rel_humidity: z.number(),
        simulated_start_time: z.string(),
        simulated_time_multiplier: z.number(),
        simulated_time_offsets: z.array(z.number()),
        skies: z.number(),
        temp_units: z.number(),
        temp_value: z.number(),
        time_of_day: z.number(),
        track_water: z.number(),
        version: z.number(),
        weather_summary: z.object({
          max_precip_rate: z.number(),
          max_precip_rate_desc: z.string(),
          precip_chance: z.number(),
          skies_high: z.number(),
          skies_low: z.number(),
          temp_high: z.number(),
          temp_low: z.number(),
          temp_units: z.number(),
          wind_dir: z.number(),
          wind_high: z.number(),
          wind_low: z.number(),
          wind_units: z.number(),
        }),
        weather_url: z.string(),
        wind_dir: z.number(),
        wind_units: z.number(),
        wind_value: z.number(),
      }),
      week_end_time: z.string(),
    }),
  ),
  season_quarter: z.number(),
  season_short_name: z.string(),
  season_year: z.number(),
  send_to_open_practice: z.boolean(),
  series_id: z.number(),
  short_parade_lap: z.boolean(),
  start_date: z.string(),
  start_on_qual_tire: z.boolean(),
  start_zone: z.boolean(),
  track_types: z.array(z.number()),
  unsport_conduct_rule_mode: z.number(),
});

export type GetSeasonsResponseType = z.infer<typeof GetSeasonsResponse>;